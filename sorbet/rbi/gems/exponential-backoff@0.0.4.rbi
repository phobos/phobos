# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `exponential-backoff` gem.
# Please instead update this file by running `bin/tapioca gem exponential-backoff`.

# source://exponential-backoff//lib/exponential_backoff/version.rb#1
class ExponentialBackoff
  # @raise [ArgumentError]
  # @return [ExponentialBackoff] a new instance of ExponentialBackoff
  #
  # source://exponential-backoff//lib/exponential_backoff.rb#7
  def initialize(interval, maximum_elapsed_time = T.unsafe(nil)); end

  # source://exponential-backoff//lib/exponential_backoff.rb#20
  def clear; end

  # Returns the value of attribute current_interval.
  #
  # source://exponential-backoff//lib/exponential_backoff.rb#5
  def current_interval; end

  # source://exponential-backoff//lib/exponential_backoff.rb#42
  def interval_at(iteration); end

  # source://exponential-backoff//lib/exponential_backoff.rb#46
  def intervals; end

  # source://exponential-backoff//lib/exponential_backoff.rb#38
  def intervals_for(range); end

  # @return [Boolean]
  #
  # source://exponential-backoff//lib/exponential_backoff.rb#28
  def iteration_active?(iteration); end

  # Returns the value of attribute multiplier.
  #
  # source://exponential-backoff//lib/exponential_backoff.rb#4
  def multiplier; end

  # Sets the attribute multiplier
  #
  # @param value the value to set the attribute multiplier to.
  #
  # source://exponential-backoff//lib/exponential_backoff.rb#4
  def multiplier=(_arg0); end

  # source://exponential-backoff//lib/exponential_backoff.rb#24
  def next_interval; end

  # Returns the value of attribute randomize_factor.
  #
  # source://exponential-backoff//lib/exponential_backoff.rb#4
  def randomize_factor; end

  # Sets the attribute randomize_factor
  #
  # @param value the value to set the attribute randomize_factor to.
  #
  # source://exponential-backoff//lib/exponential_backoff.rb#4
  def randomize_factor=(_arg0); end

  # source://exponential-backoff//lib/exponential_backoff.rb#56
  def until_success(&block); end

  protected

  # source://exponential-backoff//lib/exponential_backoff.rb#77
  def capped_interval(interval); end

  # source://exponential-backoff//lib/exponential_backoff.rb#70
  def randomized_interval(interval); end

  # source://exponential-backoff//lib/exponential_backoff.rb#66
  def regular_interval(initial, multiplier, iteration); end
end

# source://exponential-backoff//lib/exponential_backoff/version.rb#2
ExponentialBackoff::VERSION = T.let(T.unsafe(nil), String)
